{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This is meant as a means to document that was written using the calculations done in Harmonic Space (as opposed to real space, information for which can be found in README(please).txt and README2.tx and OptimizationInfo.txt). \
Since this calculation is much simpler, the code-base is also smaller. There is some overlap with the previous code, as pointed out below. \
\
1. RemoteQuad_Harmonic.py: As the name implies, this is for computing the remote quadrupole covariances and relations matrix elements. Note that this only requires the transfer function for the l=2 term. Instead of calling the transfer function from a separate class, I have incorporated it within the same script (it\'92s faster this way as the interpolation tables, qlist and nlist,  only need to be loaded once). \
There also exists an interpolation table to calculate the ISW term (stored as \'93ISWL2.npz\'94) which can also be used for this. To turn this interpolation off, simply change the value of the global variable \'93Interpolate\'94 to \'91OFF\'92. \
\
This code can be tested using various means \'97 since most authors on the subject have done their calculations in Harmonic Space (specifically, Hall&Challinor, and Seta&Pierpaoli). See PlotsInfo for more info on this.\
\
Tests:\
To generate Fig. 2 of Seto Pierpaoli:\
\
l = 10#this is the value you want to change\
H20 = 5*KIntegral(0,0,2)\
plt.plot(np.arange(0,2.1,0.01),[(2*l + 1)*KIntegral(i,i,l)for i in np.arange(0,2.1,0.01)]/H20)\
\
\
Issues so far(Tue June 27th):\
\
1. Why do I have to multiply KIntegral by a factor of 10**4??\
2. \\xi_L(z,z) works fine for L=2 and L=3\'85. somethings not right for L>=3\'85..\
Haha figured out the issue! In numpy, the integral function quad, cares about the absolute error. Since the values I\'92m dealing with are quite small, I need to multiply by a big factor (say 10**6) before integrating. In the end, I can just divide by that number again to fix the issue. \
toDo:\
- figure out exact factor that allows for the conversion between the previous (spatial) code to this one. \
Emperically, the number is 526.2668069929152\'85\'85\
- what\'92s up with the constant factor that Theabout and SetoPierpaoli are using?? It should be 9/8Pi but is instead 9Pi/4\
 }