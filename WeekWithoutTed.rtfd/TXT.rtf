{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww21080\viewh11600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 Work Done While Ted Is Away:\
\

\b0 \ulnone 1. Fixed some issues with the optimized code which wasn\'92t exactly reproducing the SetoPierpaoli figure (we ended up using the incredibly slow pre-optimized code for this purpose\'85)\
\
2. In the Harmonic Space code, for l>3, the results had weird singularities and were discontinuous. This turns out to be a problem of numpy\'92s quad function which takes into account absolute error not relative error\'85\'85\'85 (although I\'92m pretty sure we can configure it to do so). The workaround is simply: multiply by a big factor before integrating, then divide by that factor\'85.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 3. INTERPOLATION TABLES:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 Generating interpolation tables: \
(From RemoteQuad_Harmonic)\
l = 4\
zlist = np.arange(0.1,0.51,0.01)\
interp = XiInterpolate(l,0.08)\
interPlot = [interp(z) for z in zlist]\
realPlot = [KIntegral(z,z,l) for z in zlist]\
plt.figure()\
plt.plot(zlist, interPlot)\
plt.plot(zlist, realPlot)\
\
\
\\xi_l(z,z) (for 1D interpolation) works great even with spacing of 0.1 in z. Note so much for spacing~0.5 for obvious reasons. (Judging from Set Pierpaoli, I don\'92t think we\'92ll need anything finer than this \'97 they\'92re using \\deltaZ = 0.2 as their bin size. We can do one better). See InterpolationFigs folder.\
\
\\delta z = 0.1 seems to be a little too coarse for low redshifts for l=4 (and consequently higher Ls)., but seems fine for high z\'85.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 1.tiff \width11300 \height8400
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\\delta z = 0.05 seems to work well\'85 but not so much for 0<z<0.1\'85.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic.tiff \width11420 \height8540
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0  <\'97 This is for l=4 and \\delta z = 0.05\

\fs32 \
\

\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 2.tiff \width11380 \height3140
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  <\'97 deltaZ = 0.02 for low redshift\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs32 \cf0 So for l=4, my interpolation should be \\delta z = 0.02 for 0<z<0.1, deltaZ= 0.08 for 0.1<z<0.50 and z = 0.1 for 0.5<z<2
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 This gives the following result: \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 4.tiff \width11080 \height8680
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Which looks good to me, and it only took 25 values of z in total. \
\
The good thing about this spacing convention is that it even works well for higher l:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 5.tiff \width11040 \height8580
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 6.tiff \width11120 \height8540
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
NOTE: IN ALL THE PLOTS ABOVE, the \'93real\'94 plot (i..e not the interpolated one) is sampled at deltaZ = 0.01\
Spacing: \
    z1 = np.arange(0,0.12,0.02)\
    z2 = np.arange(0.12,0.50,0.08)\
    z3 = np.arange(0.50,2.1,0.1)\
    zvals = np.concatenate([z1,z2,z3])\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic 1__#$!@%!#__Pasted Graphic.tiff \width23680 \height18240
}¬}
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
This same spacing also works surprisingly well for when I hold z1 fixed and plot \\xi_l as a function of z\'92:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 7.tiff \width10860 \height8520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
(Actually, I realized I\'92m being a little silly with these plots\'85 the y-axis gives one little idea of the significance of these values. A much better thing to plot is \
\\xi_l(z1,z) / \\xi_2(0,0)
\fs28 \
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Contour Plots (for high L):\
Ted\'92s prediction was correct: \\xi_l is definitely quite sharply peaked for high values of L\'85.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 8.tiff \width10920 \height8920
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 9.tiff \width11080 \height8820
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Low L:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 10.tiff \width10680 \height8900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 11.tiff \width10800 \height8700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \
While it\'92s more sharply peaked for higher l, the problem that persists is that the covariances at higher z are a greater percentage of the \'93peaked\'94 part\'85..\
So at high z, the relative contributions from higher L is greater (\'93more power transfer\'94). \
But this might be problematic for the covariances between a high red-shift and a low-redshift cluster\'85 since there the contribution from the high Ls is comparable (but lower) than that from the low Ls. For e.g. consider \\xi_3(0.5,1.50) ~ 0.5, while \\xi_7(0.5,1.5) ~0.03\
\
\
If I plot  delta z (z\'92-z) instead:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 12.tiff \width10560 \height8500
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 13.tiff \width10200 \height8520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Note: To generate these plots, in RemoteQuad_Harmonic.py:\
l = 2#change this as needed        \
zlist = np.arange(0,2.2,0.2)\
T = np.zeros((len(zlist),len(zlist)))\
plotList = np.zeros((len(zlist),len(zlist)))\
for i in range(0,len(zlist)):\
    for j in range(0,len(zlist)):\
        plotList[i][j] = KIntegral(zlist[i],zlist[j],l)\
        T[i][j] = np.abs(zlist[j] - zlist[i])\
        print(zlist[i],zlist[j],plotList[i][j])\
\
X,Y = np.meshgrid(zlist,zlist)\
plt.figure()\
cp = plt.contourf(X,-T,plotList)            \
plt.colorbar(cp)\
\
(for zprime vs z, remove the thing called \'93T\'94)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 3. Figuring out the constant between old and new code:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \
- What\'92s the realtion between the old code and new code? Presumably they differ only a constant\'85. emperically, I found this to be 526.2668069929152 but how do you get it analytically?\
- Hall&Challinor don\'92t derive eon (13) and don\'92t say where it\'92s coming from\'85.. how does it agree with eqn. (A15) from E. Bunn?\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\b \ul 4. Voxelization:\
\

\b0 \ulnone See Voexelization.py; We need ~12 shells in z before the correlation drops to about ~98%.The theta value at which this cutoff is met, \\Delta Theta, is different for each z (i.e. is a function of z) but is constant within each shel. \
The phi part is slightly tricky: recall that \\xi_l depends on the angular distance given by beta. At constant theta, beta = \\Delta phi = \\Delta Theta (z) / Sin(theta)
\b \ul \

\b0 \ulnone \
We want to pixelize as per Healpix maps using \'93Nside\'94. I think it might be a good idea to just use Nside = 8 for each of the voxels. This is because at low redshift (for the first two z-shalles), I only need Nside = 4 (but more doesn\'92t hurt). It\'92s only in the last few that I need to use Nside = 16, but even there, with Nside =8, the correlation only drops to ~96.6%. So if we just use that as our cutoff then we\'92re good? It might be more convenient to use constant Nside across all z-shels. \
\
NOTE: I\'92ve saved the voxelization in z in a file called \'93zVox.npy\'94 and the corresponding covariance matrix, which I used to generate this, in a file called \'93VoxelizeCovarianceMatrix.npy\'94.\
\
Q: Why is alpha = sqrt(4 Pi/Np)?\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 current estimate: with a cutoff of 0.96-0.98 we have around 6000 voxels. If the old remote quadrupole quad (real space) can do this fairly quickly do we even need to be worried about doing this in harmonic space\'85.. specially at the cost of adding the eroors that from truncating \'93L\'94 at some Lmax value (important for large redshifts)\'85.\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \ul 5. Parallelize\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \ulnone -Got Multiprocessing module of python to work. This allows me to use all the cores in a node; on my Mac, this gives an 8x speedup (due to 8 cores). Now have to figure out how to use multiple nodes\'85..\
See TestParalle.py where I\'92m generating a covariance matrix using multiple processors.\
\
\
}